# Storm Surge E-commerce Demo Application
# Realistic microservices for testing Kubernetes elasticity

---
# Product Catalog Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-catalog
  labels:
    app: product-catalog
    tier: backend
    storm-surge.io/component: catalog
spec:
  replicas: 2
  selector:
    matchLabels:
      app: product-catalog
  template:
    metadata:
      labels:
        app: product-catalog
        tier: backend
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: product-catalog
        image: nginx:alpine
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        env:
        - name: SERVICE_NAME
          value: "product-catalog"
        - name: STORM_SURGE_COMPONENT
          value: "catalog"
        volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html
      volumes:
      - name: html
        configMap:
          name: product-catalog-html

---
apiVersion: v1
kind: Service
metadata:
  name: product-catalog-service
spec:
  selector:
    app: product-catalog
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# Shopping Cart Service (CPU intensive for scaling tests)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shopping-cart
  labels:
    app: shopping-cart
    tier: backend
    storm-surge.io/component: cart
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shopping-cart
  template:
    metadata:
      labels:
        app: shopping-cart
        tier: backend
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: shopping-cart
        image: nginx:alpine
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        env:
        - name: SERVICE_NAME
          value: "shopping-cart"
        - name: STORM_SURGE_COMPONENT
          value: "cart"
        volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html
      volumes:
      - name: html
        configMap:
          name: shopping-cart-html

---
apiVersion: v1
kind: Service
metadata:
  name: shopping-cart-service
spec:
  selector:
    app: shopping-cart
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# Frontend Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
    tier: frontend
    storm-surge.io/component: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        tier: frontend
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: frontend
        image: nginx:alpine
        ports:
        - containerPort: 80
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d
        - name: html
          mountPath: /usr/share/nginx/html
      volumes:
      - name: config
        configMap:
          name: frontend-config
      - name: html
        configMap:
          name: frontend-html

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer

---
# HPA for Shopping Cart
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: shopping-cart-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: shopping-cart
  minReplicas: 1
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
# ConfigMaps for service content
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
data:
  default.conf: |
    upstream shopping-cart {
        server shopping-cart-service:80;
    }
    upstream product-catalog {
        server product-catalog-service:80;
    }

    server {
        listen 80;
        server_name localhost;

        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location /api/cart/ {
            proxy_pass http://shopping-cart/;
        }

        location /api/products/ {
            proxy_pass http://product-catalog/;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-html
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>üå©Ô∏è Storm Surge - Weather the Scaling Storm</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
            .container { max-width: 1200px; margin: 0 auto; background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; backdrop-filter: blur(10px); }
            .header { text-align: center; margin-bottom: 40px; }
            .storm-icon { font-size: 4em; margin-bottom: 20px; }
            .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 25px; margin: 30px 0; }
            .service { background: rgba(255,255,255,0.2); padding: 25px; border-radius: 10px; border-left: 5px solid #00d4ff; }
            .load-test { background: rgba(255,255,255,0.15); padding: 25px; border-radius: 10px; margin: 30px 0; text-align: center; }
            button { background: linear-gradient(45deg, #00d4ff, #0099cc); color: white; padding: 12px 24px; border: none; border-radius: 25px; cursor: pointer; margin: 8px; font-weight: bold; transition: transform 0.2s; }
            button:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,212,255,0.4); }
            .status { margin: 15px 0; padding: 15px; background: rgba(0,255,0,0.2); border-radius: 8px; }
            .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
            .metric { background: rgba(255,255,255,0.2); padding: 20px; border-radius: 10px; text-align: center; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <div class="storm-icon">üå©Ô∏è</div>
                <h1>Storm Surge</h1>
                <p>Weather the Kubernetes Scaling Storm</p>
            </div>

            <div class="services">
                <div class="service">
                    <h3>üì¶ Product Catalog</h3>
                    <p>Browse storm-ready products</p>
                    <button onclick="testService('/api/products')">Test Service</button>
                </div>

                <div class="service">
                    <h3>üõçÔ∏è Shopping Cart</h3>
                    <p>CPU-intensive cart operations</p>
                    <button onclick="testService('/api/cart')">Test Service</button>
                </div>
            </div>

            <div class="load-test">
                <h3>‚ö° Storm Testing</h3>
                <p>Generate scaling storms to test resilience:</p>
                <button onclick="startStorm('light')">Light Storm ‚õÖ</button>
                <button onclick="startStorm('moderate')">Moderate Storm üåßÔ∏è</button>
                <button onclick="startStorm('severe')">Severe Storm ‚õàÔ∏è</button>
                <button onclick="startStorm('hurricane')">Hurricane üå™Ô∏è</button>
                <button onclick="stopStorm()">Eye of Storm üåÄ</button>
                <div id="stormStatus" class="status" style="display: none;"></div>
            </div>

            <div class="metrics">
                <div class="metric">
                    <h4>Active Pods</h4>
                    <div id="podCount">Loading...</div>
                </div>
                <div class="metric">
                    <h4>Storm Intensity</h4>
                    <div id="stormLevel">Calm</div>
                </div>
                <div class="metric">
                    <h4>Survival Rate</h4>
                    <div id="survivalRate">100%</div>
                </div>
            </div>

            <div id="response" style="margin-top: 20px;"></div>
        </div>

        <script>
            let stormInterval;

            async function testService(endpoint) {
                try {
                    const response = await fetch(endpoint);
                    const data = await response.text();
                    document.getElementById('response').innerHTML =
                        '<h4>‚ö° Storm Response from ' + endpoint + ':</h4>' +
                        '<pre style="background: rgba(0,0,0,0.3); padding: 15px; border-radius: 8px;">' + data + '</pre>';
                } catch (error) {
                    document.getElementById('response').innerHTML =
                        '<h4>üåä Storm disrupted ' + endpoint + ':</h4>' +
                        '<pre style="background: rgba(255,0,0,0.3); padding: 15px; border-radius: 8px;">' + error.message + '</pre>';
                }
            }

            function startStorm(intensity) {
                stopStorm();

                const storms = {
                    'light': { interval: 200, concurrent: 2, name: 'Light Storm ‚õÖ', duration: 120 },
                    'moderate': { interval: 100, concurrent: 5, name: 'Moderate Storm üåßÔ∏è', duration: 300 },
                    'severe': { interval: 50, concurrent: 10, name: 'Severe Storm ‚õàÔ∏è', duration: 600 },
                    'hurricane': { interval: 25, concurrent: 20, name: 'Hurricane üå™Ô∏è', duration: 900 }
                };

                const storm = storms[intensity];
                const status = document.getElementById('stormStatus');
                status.style.display = 'block';
                status.innerHTML = `üå©Ô∏è ${storm.name} in progress for ${storm.duration}s...`;

                document.getElementById('stormLevel').textContent = storm.name;

                stormInterval = setInterval(() => {
                    for (let i = 0; i < storm.concurrent; i++) {
                        const endpoints = ['/api/products', '/api/cart'];
                        const randomEndpoint = endpoints[Math.floor(Math.random() * endpoints.length)];
                        fetch(randomEndpoint).catch(e => console.log('Storm request failed:', e));
                    }
                }, storm.interval);

                // Auto-stop storm
                setTimeout(() => {
                    if (stormInterval) {
                        stopStorm();
                    }
                }, storm.duration * 1000);
            }

            function stopStorm() {
                if (stormInterval) {
                    clearInterval(stormInterval);
                    stormInterval = null;
                    const status = document.getElementById('stormStatus');
                    status.innerHTML = 'üåÄ Entered the eye of the storm - calm restored';
                    document.getElementById('stormLevel').textContent = 'Calm';
                    setTimeout(() => {
                        status.style.display = 'none';
                    }, 3000);
                }
            }

            // Initialize
            window.onload = function() {
                testService('/health');
                // Simulate metrics updates
                setInterval(() => {
                    document.getElementById('podCount').textContent = Math.floor(Math.random() * 20) + 5;
                    document.getElementById('survivalRate').textContent = (95 + Math.random() * 5).toFixed(1) + '%';
                }, 5000);
            }
        </script>
    </body>
    </html>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: product-catalog-html
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head><title>Storm Surge - Product Catalog</title></head>
    <body>
        <h1>üå©Ô∏è Storm Surge Product Catalog</h1>
        <p>Service: product-catalog</p>
        <p>Status: Weathering the storm ‚õàÔ∏è</p>
        <div>
            <h3>Storm-Ready Products:</h3>
            <ul>
                <li>‚ö° Lightning-Fast Servers</li>
                <li>üåä Tsunami-Resistant Storage</li>
                <li>üå™Ô∏è Hurricane-Proof Networking</li>
            </ul>
        </div>
    </body>
    </html>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: shopping-cart-html
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head><title>Storm Surge - Shopping Cart</title></head>
    <body>
        <h1>üå©Ô∏è Storm Surge Shopping Cart</h1>
        <p>Service: shopping-cart</p>
        <p>Status: High-intensity processing ‚ö°</p>
        <div>
            <h3>Cart Contents:</h3>
            <ul>
                <li>‚ö° Lightning Scaling (Qty: ‚àû)</li>
                <li>üåä Spot Instance Surfboard (Qty: 1)</li>
                <li>üå™Ô∏è Chaos Engineering Kit (Qty: 1)</li>
            </ul>
            <p><strong>Total Resilience: Unlimited</strong></p>
        </div>
        <script>
            // Simulate CPU load for scaling tests
            setInterval(function() {
                var start = Date.now();
                while (Date.now() - start < 100) {
                    Math.random();
                }
            }, 500);
        </script>
    </body>
    </html>
