# Persistent Storage Configuration for Databases
---
# StorageClass for cloud provider dynamic provisioning
# Adjust based on your cloud provider (gke, eks, aks)
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: storm-surge-ssd
  annotations:
    storageclass.kubernetes.io/is-default-class: "false"
provisioner: kubernetes.io/gce-pd  # Change based on provider: kubernetes.io/aws-ebs, kubernetes.io/azure-disk
parameters:
  type: pd-ssd  # gce-pd-ssd, gp3 (AWS), Premium_LRS (Azure)
  replication-type: regional-pd  # For GKE regional disks
allowVolumeExpansion: true
volumeBindingMode: WaitForFirstConsumer
---
# PostgreSQL Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  namespace: oceansurge
  labels:
    app: postgresql
    tier: database
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: storm-surge-ssd
  resources:
    requests:
      storage: 20Gi
---
# Redis Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: oceansurge
  labels:
    app: redis
    tier: database
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: storm-surge-ssd
  resources:
    requests:
      storage: 10Gi
---
# Updated PostgreSQL StatefulSet with persistent storage
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: oceansurge
  labels:
    app: postgresql
    tier: database
spec:
  serviceName: postgresql
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
        tier: database
    spec:
      serviceAccountName: database-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      containers:
      - name: postgresql
        image: postgres:14-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "oceansurge"
        - name: POSTGRES_USER
          value: "oceansurge"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-auth
              key: oceansurge-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: postgresql-storage
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - oceansurge
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - oceansurge
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
  volumeClaimTemplates:
  - metadata:
      name: postgresql-storage
      labels:
        app: postgresql
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: storm-surge-ssd
      resources:
        requests:
          storage: 20Gi
---
# Updated Redis StatefulSet with persistent storage
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: oceansurge
  labels:
    app: redis
    tier: database
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        tier: database
    spec:
      serviceAccountName: database-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-auth
              key: password
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-config
        configMap:
          name: redis-config-secure
  volumeClaimTemplates:
  - metadata:
      name: redis-storage
      labels:
        app: redis
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: storm-surge-ssd
      resources:
        requests:
          storage: 10Gi
---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: oceansurge
  labels:
    app: postgresql
    tier: database
spec:
  type: ClusterIP
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: oceansurge
  labels:
    app: redis
    tier: database
spec:
  type: ClusterIP
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
---
# Backup CronJob for PostgreSQL
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgresql-backup
  namespace: oceansurge
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: database-sa
          containers:
          - name: postgresql-backup
            image: postgres:14-alpine
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-auth
                  key: oceansurge-password
            command:
            - /bin/bash
            - -c
            - |
              DATE=$(date +%Y%m%d_%H%M%S)
              pg_dump -h postgresql -U oceansurge oceansurge > /backup/oceansurge_$DATE.sql
              # Keep only last 7 days of backups
              find /backup -name "oceansurge_*.sql" -mtime +7 -delete
            volumeMounts:
            - name: backup
              mountPath: /backup
          volumes:
          - name: backup
            persistentVolumeClaim:
              claimName: postgresql-backup-pvc
          restartPolicy: OnFailure
---
# Backup storage PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-backup-pvc
  namespace: oceansurge
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: storm-surge-ssd
  resources:
    requests:
      storage: 50Gi