apiVersion: v1
kind: ConfigMap
metadata:
  name: secure-middleware-code
  namespace: oceansurge
data:
  main.py: |
    #!/usr/bin/env python3
    """
    OceanSurge Middleware: Secure Feature Flag to Spot API Integration
    Production-ready with full security hardening
    """
    
    import os
    import json
    import logging
    import requests
    import hmac
    import hashlib
    import time
    from functools import wraps
    from flask import Flask, request, jsonify
    from flask_limiter import Limiter
    from flask_limiter.util import get_remote_address
    from flask_cors import CORS
    from typing import Dict, Any
    import structlog

    # Configure structured logging
    structlog.configure(
        processors=[
            structlog.stdlib.filter_by_level,
            structlog.stdlib.add_logger_name,
            structlog.stdlib.add_log_level,
            structlog.processors.TimeStamper(fmt="iso"),
            structlog.processors.JSONRenderer()
        ],
        context_class=dict,
        logger_factory=structlog.stdlib.LoggerFactory(),
        wrapper_class=structlog.stdlib.BoundLogger,
        cache_logger_on_first_use=True,
    )

    logger = structlog.get_logger()
    
    app = Flask(__name__)

    # Security Configuration
    API_KEY = os.getenv('MIDDLEWARE_API_KEY', 'REPLACE_WITH_MIDDLEWARE_API_KEY')
    WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET', 'REPLACE_WITH_YOUR_WEBHOOK_SECRET')
    ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', 'https://yourdomain.com').split(',')

    # Configure CORS securely
    CORS(app, origins=ALLOWED_ORIGINS, supports_credentials=True)

    # Configure rate limiting
    limiter = Limiter(
        app,
        key_func=get_remote_address,
        default_limits=["1000 per hour", "100 per minute"]
    )

    # Configuration from environment variables
    FEATURE_FLAG_PROVIDER = os.getenv('FEATURE_FLAG_PROVIDER', 'launchdarkly')
    SPOT_API_TOKEN = os.getenv('SPOT_API_TOKEN', 'YOUR_SPOT_API_TOKEN_HERE')
    SPOT_API_BASE_URL = "https://api.spotinst.io/ocean/gcp/k8s"
    LAUNCHDARKLY_SDK_KEY = os.getenv('LAUNCHDARKLY_SDK_KEY', 'REPLACE_WITH_YOUR_LAUNCHDARKLY_SDK_KEY')
    SPOT_CLUSTER_ID = os.getenv('SPOT_CLUSTER_ID', 'o-e8f535e3')
    
    def require_api_key(f):
        """Decorator to require API key authentication"""
        @wraps(f)
        def decorated_function(*args, **kwargs):
            api_key = request.headers.get('X-API-Key') or request.headers.get('Authorization', '').replace('Bearer ', '')
            
            if not api_key:
                logger.warning("API request without key", ip=request.remote_addr, endpoint=request.endpoint)
                return jsonify({'error': 'API key required'}), 401
            
            if not hmac.compare_digest(api_key, API_KEY):
                logger.warning("Invalid API key attempt", ip=request.remote_addr, endpoint=request.endpoint)
                return jsonify({'error': 'Invalid API key'}), 401
            
            logger.info("Authenticated API request", ip=request.remote_addr, endpoint=request.endpoint)
            return f(*args, **kwargs)
        return decorated_function

    def verify_webhook_signature(payload: bytes, signature: str) -> bool:
        """Verify LaunchDarkly webhook signature"""
        if not WEBHOOK_SECRET or WEBHOOK_SECRET == 'REPLACE_WITH_YOUR_WEBHOOK_SECRET':
            logger.warning("⚠️  Webhook secret not configured - signature verification disabled")
            return True  # Allow in development
        
        try:
            expected_sig = hmac.new(
                WEBHOOK_SECRET.encode(),
                payload,
                hashlib.sha256
            ).hexdigest()
            
            # Handle different signature formats
            if signature.startswith('sha256='):
                signature = signature[7:]
            
            is_valid = hmac.compare_digest(expected_sig, signature)
            if not is_valid:
                logger.error("Invalid webhook signature", 
                           expected=expected_sig[:8] + "...", 
                           received=signature[:8] + "...")
            return is_valid
        except Exception as e:
            logger.error("Webhook signature verification failed", error=str(e))
            return False

    @app.after_request
    def add_security_headers(response):
        """Add security headers to all responses"""
        response.headers['X-Content-Type-Options'] = 'nosniff'
        response.headers['X-Frame-Options'] = 'DENY'
        response.headers['X-XSS-Protection'] = '1; mode=block'
        response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'
        response.headers['Content-Security-Policy'] = "default-src 'self'"
        response.headers['Referrer-Policy'] = 'strict-origin-when-cross-origin'
        return response

    class SpotAPIClient:
        def __init__(self):
            self.base_url = SPOT_API_BASE_URL
            self.headers = {
                'Authorization': f'Bearer {SPOT_API_TOKEN}',
                'Content-Type': 'application/json'
            }
            self.cluster_id = SPOT_CLUSTER_ID
        
        def scale_cluster(self, capacity: int) -> Dict[str, Any]:
            """Scale the Spot Ocean cluster"""
            account_id = os.getenv('SPOT_ACCOUNT_ID', 'YOUR_SPOT_ACCOUNT_ID')
            url = f"{self.base_url}/cluster/{self.cluster_id}?accountId={account_id}"
            
            payload = {
                "cluster": {
                    "capacity": {
                        "minimum": 0,
                        "maximum": capacity,
                        "target": capacity
                    }
                }
            }
            
            try:
                logger.info("Scaling cluster", cluster_id=self.cluster_id, capacity=capacity)
                response = requests.put(url, headers=self.headers, json=payload, timeout=30)
                response.raise_for_status()
                
                result = response.json()
                logger.info("Cluster scaling successful", result=result)
                return result
            except requests.exceptions.RequestException as e:
                logger.error("Cluster scaling failed", error=str(e), status_code=getattr(e.response, 'status_code', None))
                raise

    # Initialize Spot API client
    spot_client = SpotAPIClient()

    @app.route('/health')
    def health_check():
        """Health check endpoint"""
        return jsonify({
            'status': 'healthy',
            'service': 'oceansurge-middleware',
            'version': '2.0.0-secure',
            'timestamp': time.time()
        })

    @app.route('/api/cluster/status')
    @require_api_key
    @limiter.limit("100 per minute")
    def get_cluster_status():
        """Get current cluster status"""
        try:
            account_id = os.getenv('SPOT_ACCOUNT_ID', 'YOUR_SPOT_ACCOUNT_ID')
            url = f"{SPOT_API_BASE_URL}/cluster/{SPOT_CLUSTER_ID}?accountId={account_id}"
            
            response = requests.get(url, headers=spot_client.headers, timeout=30)
            response.raise_for_status()
            
            cluster_data = response.json()
            logger.info("Cluster status retrieved successfully")
            
            return jsonify({
                'status': 'success',
                'cluster_id': SPOT_CLUSTER_ID,
                'data': cluster_data,
                'timestamp': time.time()
            })
        except Exception as e:
            logger.error("Failed to get cluster status", error=str(e))
            return jsonify({'error': 'Failed to retrieve cluster status'}), 500

    @app.route('/webhook/launchdarkly', methods=['POST'])
    @limiter.limit("60 per minute")
    def launchdarkly_webhook():
        """Handle LaunchDarkly webhook events with security"""
        try:
            # Verify signature
            signature = request.headers.get('X-LD-Signature', '')
            if not verify_webhook_signature(request.data, signature):
                logger.error("Webhook signature verification failed", ip=request.remote_addr)
                return jsonify({'error': 'Invalid signature'}), 401
            
            payload = request.get_json()
            if not payload:
                return jsonify({'error': 'Invalid JSON payload'}), 400
            
            logger.info("Webhook received", event_type=payload.get('kind'))
            
            # Process audit log events from LaunchDarkly
            if payload.get('kind') == 'auditLogEntryAdded':
                entry = payload.get('auditLogEntry', {})
                
                if entry.get('kind') == 'flag' and entry.get('name') == 'flag-configuration-changed':
                    flag_key = entry.get('flag', {}).get('key')
                    
                    if flag_key == 'enable-cost-optimizer':
                        # Get current flag value
                        current_value = entry.get('currentValue', {}).get('variation')
                        
                        if current_value == 0:  # Flag disabled - scale down
                            logger.info("Cost optimizer disabled - scaling down")
                            result = spot_client.scale_cluster(1)  # Minimum capacity
                        elif current_value == 1:  # Flag enabled - scale up
                            logger.info("Cost optimizer enabled - scaling up")
                            result = spot_client.scale_cluster(5)  # Increased capacity
                        else:
                            logger.info("Unknown flag value", value=current_value)
                            return jsonify({'status': 'ignored', 'reason': 'unknown flag value'})
                        
                        return jsonify({
                            'status': 'processed',
                            'flag_key': flag_key,
                            'action': 'scale_down' if current_value == 0 else 'scale_up',
                            'spot_response': result
                        })
            
            return jsonify({'status': 'ignored', 'reason': 'not a relevant flag change'})
            
        except Exception as e:
            logger.error("Webhook processing failed", error=str(e), ip=request.remote_addr)
            return jsonify({'error': 'Webhook processing failed'}), 500

    @app.route('/api/scale', methods=['POST'])
    @require_api_key
    @limiter.limit("10 per minute")
    def manual_scale():
        """Manual cluster scaling endpoint"""
        try:
            data = request.get_json()
            if not data or 'capacity' not in data:
                return jsonify({'error': 'Capacity parameter required'}), 400
            
            capacity = int(data['capacity'])
            if capacity < 0 or capacity > 20:
                return jsonify({'error': 'Capacity must be between 0 and 20'}), 400
            
            logger.info("Manual scaling requested", capacity=capacity, ip=request.remote_addr)
            result = spot_client.scale_cluster(capacity)
            
            return jsonify({
                'status': 'success',
                'requested_capacity': capacity,
                'spot_response': result
            })
        except Exception as e:
            logger.error("Manual scaling failed", error=str(e))
            return jsonify({'error': 'Scaling operation failed'}), 500

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=5000, debug=False)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secure-middleware
  namespace: oceansurge
  labels:
    app: secure-middleware
    version: v2.0-secure
spec:
  replicas: 2
  selector:
    matchLabels:
      app: secure-middleware
  template:
    metadata:
      labels:
        app: secure-middleware
        version: v2.0-secure
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: middleware
        image: python:3.11-slim
        ports:
        - containerPort: 5000
        env:
        - name: FLASK_ENV
          value: "production"
        - name: SPOT_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: spot-api-secret
              key: token
        - name: MIDDLEWARE_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-security-secrets
              key: service-api-key
        - name: WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: api-security-secrets
              key: webhook-secret
        envFrom:
        - configMapRef:
            name: feature-flag-config
        - configMapRef:
            name: api-security-config
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: app-code
          mountPath: /app
        - name: tmp
          mountPath: /tmp
        command: 
          - /bin/sh
          - -c
          - |
            cd /app && \
            pip install --no-cache-dir flask flask-limiter flask-cors requests structlog && \
            python main.py
      volumes:
      - name: app-code
        configMap:
          name: secure-middleware-code
      - name: tmp
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: secure-middleware-service
  namespace: oceansurge
spec:
  selector:
    app: secure-middleware
  ports:
  - port: 80
    targetPort: 5000
  type: LoadBalancer