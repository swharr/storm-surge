apiVersion: v1
kind: ConfigMap
metadata:
  name: ld-spot-config
  namespace: oceansurge
data:
  COST_IMPACT_THRESHOLD: "0.05"
  SPOT_CLUSTER_ID: "ocn-12345678"
  WEBHOOK_ENDPOINT: "/webhook/launchdarkly"
  API_ENDPOINT: "/api/cluster/status"
  LOG_LEVEL: "INFO"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: middleware-code
  namespace: oceansurge
data:
  main.py: |
    #!/usr/bin/env python3
    """
    OceanSurge Middleware: LaunchDarkly to Spot API Integration
    Handles LaunchDarkly webhook notifications and triggers Spot API actions
    """

    import os
    import json
    import logging
    import requests
    from flask import Flask, request, jsonify
    from typing import Dict, Any
    import hmac
    import hashlib
    import time

    # Configure logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    app = Flask(__name__)

    # Configuration from environment variables
    LAUNCHDARKLY_SDK_KEY = os.getenv('LAUNCHDARKLY_SDK_KEY', '')
    SPOT_API_TOKEN = os.getenv('SPOT_API_TOKEN', '')
    COST_IMPACT_THRESHOLD = float(os.getenv('COST_IMPACT_THRESHOLD', '0.05'))
    WEBHOOK_SECRET = os.getenv('WEBHOOK_SECRET', '')

    # Spot API configuration
    SPOT_API_BASE_URL = "https://api.spotinst.io/ocean/k8s"
    SPOT_CLUSTER_ID = os.getenv('SPOT_CLUSTER_ID', '')


    class SpotOceanManager:
        """Handles Spot Ocean API interactions"""

        def __init__(self, api_token: str, cluster_id: str):
            self.api_token = api_token
            self.cluster_id = cluster_id
            self.headers = {
                'Authorization': f'Bearer {api_token}',
                'Content-Type': 'application/json'
            }

        def get_cluster_info(self) -> Dict[str, Any]:
            """Get current cluster configuration"""
            try:
                response = requests.get(
                    f"{SPOT_API_BASE_URL}/cluster/{self.cluster_id}",
                    headers=self.headers
                )
                response.raise_for_status()
                return response.json()
            except requests.exceptions.RequestException as e:
                logger.error(f"Failed to get cluster info: {e}")
                return {}

        def scale_cluster(self, action: str, scale_factor: float = 1.2) -> bool:
            """Scale cluster based on cost optimization flag"""
            try:
                cluster_info = self.get_cluster_info()
                if not cluster_info:
                    return False

                current_capacity = cluster_info.get('response', {}).get('capacity', {})

                if action == 'optimize':
                    # Scale down for cost optimization
                    new_capacity = {
                        'target': max(1, int(current_capacity.get('target', 2) * 0.8)),
                        'minimum': current_capacity.get('minimum', 1),
                        'maximum': current_capacity.get('maximum', 10)
                    }
                    logger.info(f"Scaling down cluster for cost optimization: {new_capacity}")
                else:
                    # Scale up for performance
                    new_capacity = {
                        'target': min(10, int(current_capacity.get('target', 2) * scale_factor)),
                        'minimum': current_capacity.get('minimum', 1),
                        'maximum': current_capacity.get('maximum', 10)
                    }
                    logger.info(f"Scaling up cluster for performance: {new_capacity}")

                response = requests.put(
                    f"{SPOT_API_BASE_URL}/cluster/{self.cluster_id}",
                    headers=self.headers,
                    json={'cluster': {'capacity': new_capacity}}
                )
                response.raise_for_status()
                return True

            except requests.exceptions.RequestException as e:
                logger.error(f"Failed to scale cluster: {e}")
                return False


    def verify_webhook_signature(payload: bytes, signature: str) -> bool:
        """Verify LaunchDarkly webhook signature"""
        if not WEBHOOK_SECRET:
            logger.warning("No webhook secret configured - skipping signature verification")
            return True

        expected_signature = hmac.new(
            WEBHOOK_SECRET.encode('utf-8'),
            payload,
            hashlib.sha256
        ).hexdigest()

        return hmac.compare_digest(signature, expected_signature)


    @app.route('/health', methods=['GET'])
    def health_check():
        """Health check endpoint"""
        return jsonify({
            'status': 'healthy',
            'timestamp': time.time(),
            'version': '0.1.1'
        })


    @app.route('/webhook/launchdarkly', methods=['POST'])
    def handle_launchdarkly_webhook():
        """Handle LaunchDarkly webhook notifications"""
        try:
            # Verify webhook signature
            signature = request.headers.get('X-LD-Signature', '')
            if not verify_webhook_signature(request.data, signature):
                logger.error("Invalid webhook signature")
                return jsonify({'error': 'Invalid signature'}), 401

            # Parse webhook payload
            payload = request.get_json()
            if not payload:
                return jsonify({'error': 'Invalid JSON payload'}), 400

            logger.info(f"Received LaunchDarkly webhook: {payload.get('kind', 'unknown')}")

            # Process flag change events
            if payload.get('kind') == 'flag':
                flag_key = payload.get('data', {}).get('key', '')

                if flag_key == 'enable-cost-optimizer':
                    flag_value = payload.get('data', {}).get('value', False)

                    # Initialize Spot Ocean manager
                    spot_manager = SpotOceanManager(SPOT_API_TOKEN, SPOT_CLUSTER_ID)

                    if flag_value:
                        # Cost optimization enabled - scale down
                        success = spot_manager.scale_cluster('optimize')
                        action = 'cost_optimization_enabled'
                    else:
                        # Cost optimization disabled - scale up
                        success = spot_manager.scale_cluster('performance')
                        action = 'cost_optimization_disabled'

                    logger.info(f"Processed flag change: {action}, success: {success}")

                    return jsonify({
                        'status': 'processed',
                        'action': action,
                        'success': success,
                        'timestamp': time.time()
                    })

            # Default response for other webhook types
            return jsonify({
                'status': 'received',
                'kind': payload.get('kind', 'unknown'),
                'timestamp': time.time()
            })

        except Exception as e:
            logger.error(f"Error processing webhook: {e}")
            return jsonify({'error': 'Internal server error'}), 500


    @app.route('/api/cluster/status', methods=['GET'])
    def get_cluster_status():
        """Get current cluster status"""
        try:
            spot_manager = SpotOceanManager(SPOT_API_TOKEN, SPOT_CLUSTER_ID)
            cluster_info = spot_manager.get_cluster_info()

            return jsonify({
                'cluster_id': SPOT_CLUSTER_ID,
                'status': 'active' if cluster_info else 'unavailable',
                'capacity': cluster_info.get('response', {}).get('capacity', {}),
                'timestamp': time.time()
            })

        except Exception as e:
            logger.error(f"Error getting cluster status: {e}")
            return jsonify({'error': 'Internal server error'}), 500


    if __name__ == '__main__':
        logger.info("Starting OceanSurge Middleware")
        logger.info(f"LaunchDarkly SDK Key configured: {'Yes' if LAUNCHDARKLY_SDK_KEY else 'No'}")
        logger.info(f"Spot API Token configured: {'Yes' if SPOT_API_TOKEN else 'No'}")
        logger.info(f"Spot Cluster ID: {SPOT_CLUSTER_ID}")

        app.run(host='0.0.0.0', port=8000, debug=False)
  requirements.txt: |
    flask==2.3.3
    requests==2.31.0
    gunicorn==21.2.0
