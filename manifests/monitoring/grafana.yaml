---
# Grafana ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: oceansurge
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [security]
    admin_user = admin
    admin_password = $__file{/etc/grafana/secrets/admin_password}
    [server]
    http_port = 3000

---
# Grafana Datasources
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: oceansurge
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus:9090
      access: proxy
      isDefault: true
      editable: true

---
# Grafana Dashboards Config
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: oceansurge
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
# Grafana Ocean Surge Dashboard
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-oceansurge-dashboard
  namespace: oceansurge
data:
  oceansurge-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Ocean Surge - Application Overview",
        "tags": ["oceansurge"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(product_catalog_requests_total[5m])) by (endpoint)",
                "legendFormat": "Product Catalog - {{endpoint}}"
              },
              {
                "expr": "sum(rate(shopping_cart_requests_total[5m])) by (endpoint)",
                "legendFormat": "Shopping Cart - {{endpoint}}"
              }
            ],
            "yAxes": [
              {
                "label": "Requests/sec"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            }
          },
          {
            "id": 2,
            "title": "Response Time (95th percentile)",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, sum(rate(product_catalog_request_duration_seconds_bucket[5m])) by (le))",
                "legendFormat": "Product Catalog"
              },
              {
                "expr": "histogram_quantile(0.95, sum(rate(shopping_cart_request_duration_seconds_bucket[5m])) by (le))",
                "legendFormat": "Shopping Cart"
              }
            ],
            "yAxes": [
              {
                "label": "Seconds"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 0
            }
          },
          {
            "id": 3,
            "title": "Database Operations",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(product_catalog_db_operations_total[5m])) by (operation)",
                "legendFormat": "DB {{operation}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 8,
              "x": 0,
              "y": 8
            }
          },
          {
            "id": 4,
            "title": "Cache Operations",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(shopping_cart_cache_operations_total[5m])) by (operation)",
                "legendFormat": "Cache {{operation}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 8,
              "x": 8,
              "y": 8
            }
          },
          {
            "id": 5,
            "title": "Pod Resource Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(container_cpu_usage_seconds_total{namespace=\"oceansurge\"}[5m])) by (pod)",
                "legendFormat": "CPU - {{pod}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 8,
              "x": 16,
              "y": 8
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

---
# Grafana PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: oceansurge
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: gp2

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: oceansurge
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 300m
            memory: 512Mi
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: grafana-storage
          mountPath: /var/lib/grafana
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboards
        configMap:
          name: grafana-oceansurge-dashboard
      - name: grafana-storage
        emptyDir: {}

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: oceansurge
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP