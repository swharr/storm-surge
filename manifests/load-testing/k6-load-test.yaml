---
# K6 Load Test ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-load-test-script
  namespace: oceansurge
data:
  load-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    import { Rate } from 'k6/metrics';

    // Custom metrics
    const errorRate = new Rate('errors');

    // Test configuration
    export const options = {
      stages: [
        { duration: '2m', target: 10 }, // Ramp up to 10 users
        { duration: '5m', target: 10 }, // Stay at 10 users
        { duration: '2m', target: 20 }, // Ramp up to 20 users
        { duration: '5m', target: 20 }, // Stay at 20 users
        { duration: '2m', target: 0 },  // Ramp down to 0 users
      ],
    };

    // Base URLs
    const FRONTEND_URL = __ENV.FRONTEND_URL || 'http://frontend-service.oceansurge.svc.cluster.local';
    const PRODUCT_API_URL = __ENV.PRODUCT_API_URL || 'http://product-catalog-api.oceansurge.svc.cluster.local';
    const CART_API_URL = __ENV.CART_API_URL || 'http://shopping-cart-api.oceansurge.svc.cluster.local';
    const AUTH_API_URL = __ENV.AUTH_API_URL || 'http://user-auth-api.oceansurge.svc.cluster.local';

    // Test user credentials
    const TEST_USER = {
      email: `test-${Math.random().toString(36).substring(7)}@oceansurge.com`,
      password: 'TestPassword123',
      first_name: 'Test',
      last_name: 'User'
    };

    export function setup() {
      // Register a test user for authenticated requests
      const registerResponse = http.post(`${AUTH_API_URL}/register`, JSON.stringify(TEST_USER), {
        headers: { 'Content-Type': 'application/json' },
      });
      
      if (registerResponse.status === 201) {
        // Login to get token
        const loginResponse = http.post(`${AUTH_API_URL}/login`, JSON.stringify({
          email: TEST_USER.email,
          password: TEST_USER.password
        }), {
          headers: { 'Content-Type': 'application/json' },
        });
        
        if (loginResponse.status === 200) {
          const token = JSON.parse(loginResponse.body).access_token;
          return { token: token, user: TEST_USER };
        }
      }
      
      return { token: null, user: TEST_USER };
    }

    export default function(data) {
      // Test 1: Frontend health check
      let response = http.get(`${FRONTEND_URL}/health`);
      check(response, {
        'Frontend health check status is 200': (r) => r.status === 200,
      }) || errorRate.add(1);

      sleep(1);

      // Test 2: Get products from API
      response = http.get(`${PRODUCT_API_URL}/products`);
      check(response, {
        'Products API status is 200': (r) => r.status === 200,
        'Products API returns array': (r) => Array.isArray(JSON.parse(r.body)),
      }) || errorRate.add(1);

      const products = response.status === 200 ? JSON.parse(response.body) : [];
      
      sleep(1);

      // Test 3: Get specific product
      if (products.length > 0) {
        const productId = products[0].id;
        response = http.get(`${PRODUCT_API_URL}/products/${productId}`);
        check(response, {
          'Single product API status is 200': (r) => r.status === 200,
          'Single product has required fields': (r) => {
            const product = JSON.parse(r.body);
            return product.id && product.name && product.price;
          },
        }) || errorRate.add(1);
      }

      sleep(1);

      // Test 4: Cart operations
      // Create cart
      response = http.post(`${CART_API_URL}/carts`, null, {
        headers: data.token ? { 'Authorization': `Bearer ${data.token}` } : {},
      });
      check(response, {
        'Create cart status is 201': (r) => r.status === 201,
      }) || errorRate.add(1);

      if (response.status === 201 && products.length > 0) {
        const cart = JSON.parse(response.body);
        const cartId = cart.cart_id;
        const productId = products[0].id;

        // Add item to cart
        response = http.post(`${CART_API_URL}/carts/${cartId}/items`, JSON.stringify({
          product_id: productId,
          quantity: 2
        }), {
          headers: { 
            'Content-Type': 'application/json',
            ...(data.token ? { 'Authorization': `Bearer ${data.token}` } : {})
          },
        });
        check(response, {
          'Add item to cart status is 200': (r) => r.status === 200,
        }) || errorRate.add(1);

        sleep(1);

        // Get cart
        response = http.get(`${CART_API_URL}/carts/${cartId}`, {
          headers: data.token ? { 'Authorization': `Bearer ${data.token}` } : {},
        });
        check(response, {
          'Get cart status is 200': (r) => r.status === 200,
          'Cart has items': (r) => {
            const cartData = JSON.parse(r.body);
            return cartData.items.length > 0;
          },
        }) || errorRate.add(1);
      }

      sleep(1);

      // Test 5: Authentication flow (if we have a token)
      if (data.token) {
        response = http.get(`${AUTH_API_URL}/me`, {
          headers: { 'Authorization': `Bearer ${data.token}` },
        });
        check(response, {
          'Get user profile status is 200': (r) => r.status === 200,
          'Profile has email': (r) => {
            const profile = JSON.parse(r.body);
            return profile.email === data.user.email;
          },
        }) || errorRate.add(1);
      }

      // Random sleep between 1-3 seconds
      sleep(Math.random() * 2 + 1);
    }

    export function teardown(data) {
      // Logout if we have a token
      if (data.token) {
        http.post(`${AUTH_API_URL}/logout`, null, {
          headers: { 'Authorization': `Bearer ${data.token}` },
        });
      }
    }

---
# K6 Load Test Job
apiVersion: batch/v1
kind: Job
metadata:
  name: k6-load-test
  namespace: oceansurge
  labels:
    app: k6-load-test
spec:
  template:
    metadata:
      labels:
        app: k6-load-test
    spec:
      restartPolicy: Never
      containers:
      - name: k6
        image: grafana/k6:0.47.0
        command: ["k6", "run", "/scripts/load-test.js"]
        env:
        - name: FRONTEND_URL
          value: "http://frontend-service.oceansurge.svc.cluster.local"
        - name: PRODUCT_API_URL
          value: "http://product-catalog-api.oceansurge.svc.cluster.local"
        - name: CART_API_URL
          value: "http://shopping-cart-api.oceansurge.svc.cluster.local"
        - name: AUTH_API_URL
          value: "http://user-auth-api.oceansurge.svc.cluster.local"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        volumeMounts:
        - name: k6-script
          mountPath: /scripts
      volumes:
      - name: k6-script
        configMap:
          name: k6-load-test-script
  backoffLimit: 1