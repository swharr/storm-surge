# Secure Product Catalog Service with Full Security Controls
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-catalog-secure
  namespace: oceansurge
  labels:
    app: product-catalog
    version: secure
    tier: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: product-catalog
      version: secure
  template:
    metadata:
      labels:
        app: product-catalog
        version: secure  
        tier: api
      annotations:
        # Security annotations
        container.apparmor.security.beta.kubernetes.io/product-catalog: runtime/default
    spec:
      # Pod-level security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Service account with minimal permissions
      serviceAccountName: product-catalog-sa
      automountServiceAccountToken: false
      
      containers:
      - name: product-catalog
        image: python:3.11-slim
        ports:
        - containerPort: 8080
          name: http
        
        # Environment variables from secrets
        env:
        - name: POSTGRES_HOST
          value: "postgresql"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_USER
          value: "oceansurge"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-auth
              key: oceansurge-password
        - name: POSTGRES_DB
          value: "oceansurge"
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-auth
              key: password
        - name: API_SERVICE_KEY
          valueFrom:
            secretKeyRef:
              name: api-security-secrets
              key: service-api-key
        - name: JWT_PUBLIC_KEY
          valueFrom:
            secretKeyRef:
              name: jwt-secrets
              key: public-key
        
        # Container-level security context
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
        
        # Resource limits
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        
        # Volume mounts for security
        volumeMounts:
        - name: app-code
          mountPath: /app
          readOnly: true
        - name: security-code
          mountPath: /app/security
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            httpHeaders:
            - name: X-Health-Check
              value: "liveness"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
            httpHeaders:
            - name: X-Health-Check
              value: "readiness"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Startup command with security hardening
        command: ["/bin/bash"]
        args:
        - -c
        - |
          set -euo pipefail
          
          # Install dependencies securely
          pip install --no-cache-dir --user \
            fastapi==0.104.* \
            uvicorn[standard]==0.24.* \
            asyncpg==0.29.* \
            redis==5.0.* \
            structlog==23.2.* \
            pydantic==2.5.* \
            prometheus-client==0.19.* \
            cryptography==41.* \
            pyjwt[crypto]==2.8.* \
            python-multipart==0.0.6
          
          # Copy security modules
          cp -r /app/security ~/.local/lib/python3.11/site-packages/
          
          # Set secure permissions
          chmod -R 755 ~/.local/lib/python3.11/site-packages/
          
          # Start application
          cd /app && python -m uvicorn main:app --host 0.0.0.0 --port 8080 --workers 2
      
      volumes:
      - name: app-code
        configMap:
          name: product-catalog-secure-code
          defaultMode: 0444  # Read-only
      - name: security-code
        configMap:
          name: security-modules
          defaultMode: 0444
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: cache
        emptyDir:
          sizeLimit: 500Mi
      
      # Additional security constraints
      nodeSelector:
        kubernetes.io/arch: amd64
      
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 30

---
# Service Account with minimal RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: product-catalog-sa
  namespace: oceansurge
automountServiceAccountToken: false

---
# Minimal RBAC role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: product-catalog-role
  namespace: oceansurge
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
  resourceNames: ["product-catalog-config"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: product-catalog-binding
  namespace: oceansurge
subjects:
- kind: ServiceAccount
  name: product-catalog-sa
  namespace: oceansurge
roleRef:
  kind: Role
  name: product-catalog-role
  adminGroups: rbac.authorization.k8s.io

---
# Secure Service with additional annotations
apiVersion: v1
kind: Service
metadata:
  name: product-catalog-secure
  namespace: oceansurge
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/cert-id"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  selector:
    app: product-catalog
    version: secure
  ports:
  - port: 443
    targetPort: 8080
    protocol: TCP
    name: https
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  type: LoadBalancer

---
# Pod Disruption Budget for availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: product-catalog-pdb
  namespace: oceansurge
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: product-catalog
      version: secure

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: product-catalog-hpa
  namespace: oceansurge
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: product-catalog-secure
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60