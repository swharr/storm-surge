# Phase 3: Container and Network Security Infrastructure
# Advanced security controls for production deployment

---
# Pod Security Standards - Enforce restricted security profile
apiVersion: v1
kind: Namespace
metadata:
  name: oceansurge
  labels:
    # Enforce maximum security standards
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
    # Additional security labels
    security-scan: enabled
    network-policy: enforced

---
# Network Policy: Default Deny All
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: oceansurge
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Network Policy: Allow DNS Resolution
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: oceansurge
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Network Policy: API Tier Isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-tier-policy
  namespace: oceansurge
spec:
  podSelector:
    matchLabels:
      tier: api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow frontend and middleware to connect to APIs
  - from:
    - podSelector:
        matchLabels:
          tier: frontend
    - podSelector:
        matchLabels:
          app: middleware
    - podSelector:
        matchLabels:
          app: secure-middleware
    ports:
    - protocol: TCP
      port: 8080
  # Allow health checks from system
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow API services to connect to databases
  - to:
    - podSelector:
        matchLabels:
          tier: database
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  # Allow external API calls (Spot, LaunchDarkly) - HTTPS only
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow metrics scraping
  - to:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090

---
# Network Policy: Database Tier Isolation  
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: database-tier-policy
  namespace: oceansurge
spec:
  podSelector:
    matchLabels:
      tier: database
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Only allow API services to connect to databases
  - from:
    - podSelector:
        matchLabels:
          tier: api
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
  # Allow monitoring
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9187  # PostgreSQL exporter
    - protocol: TCP
      port: 9121  # Redis exporter
  egress:
  # Databases should not initiate outbound connections except DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53

---
# Network Policy: Frontend Tier Isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-tier-policy
  namespace: oceansurge
spec:
  podSelector:
    matchLabels:
      tier: frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow public traffic to frontend
  - {}
  egress:
  # Allow frontend to connect to API services
  - to:
    - podSelector:
        matchLabels:
          tier: api
    ports:
    - protocol: TCP
      port: 8080
  # Allow CDN and external resources (HTTPS only)
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# Network Policy: Monitoring Isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-policy
  namespace: oceansurge
spec:
  podSelector:
    matchLabels:
      tier: monitoring
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow access from anywhere for monitoring dashboards
  - {}
  egress:
  # Allow monitoring to scrape all services
  - to:
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 8080  # Application metrics
    - protocol: TCP
      port: 9187  # PostgreSQL exporter
    - protocol: TCP
      port: 9121  # Redis exporter

---
# Security Context Template ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-context-template
  namespace: oceansurge
data:
  pod-security-context.yaml: |
    # Standard Pod Security Context
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      fsGroupChangePolicy: "OnRootMismatch"
      seccompProfile:
        type: RuntimeDefault
      supplementalGroups: []
      sysctls: []

  container-security-context.yaml: |
    # Standard Container Security Context
    securityContext:
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
        add: []  # Only add specific capabilities if absolutely needed
      seccompProfile:
        type: RuntimeDefault
      seLinuxOptions: {}

  resource-limits.yaml: |
    # Standard Resource Limits
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
        ephemeral-storage: 100Mi
      limits:
        cpu: 1000m
        memory: 1Gi
        ephemeral-storage: 1Gi

---
# Runtime Security Policy (Falco/OPA Gatekeeper)
apiVersion: v1
kind: ConfigMap
metadata:
  name: runtime-security-policy
  namespace: oceansurge
data:
  security-policy.yaml: |
    # Runtime Security Rules
    
    # 1. Prevent privileged containers
    - name: no-privileged-containers
      rule: container.privileged = true
      action: deny
      message: "Privileged containers are not allowed"
    
    # 2. Prevent root user
    - name: no-root-user
      rule: container.user_id = 0
      action: deny
      message: "Containers cannot run as root user"
    
    # 3. Prevent dangerous capabilities
    - name: no-dangerous-capabilities
      rule: container.capabilities contains any of [SYS_ADMIN, NET_ADMIN, SYS_TIME]
      action: deny
      message: "Dangerous capabilities not allowed"
    
    # 4. Prevent host network access
    - name: no-host-network
      rule: k8s.pod.host_network = true
      action: deny
      message: "Host network access is not allowed"
    
    # 5. Prevent host PID namespace
    - name: no-host-pid
      rule: k8s.pod.host_pid = true
      action: deny
      message: "Host PID namespace access is not allowed"
    
    # 6. Prevent writable root filesystem
    - name: readonly-root-filesystem
      rule: container.read_only_fs = false
      action: warn
      message: "Container should use read-only root filesystem"
    
    # 7. Monitor suspicious file access
    - name: monitor-sensitive-files
      rule: fd.name in [/etc/passwd, /etc/shadow, /etc/hosts, /etc/hostname]
      action: alert
      message: "Access to sensitive system files detected"
    
    # 8. Monitor network connections
    - name: monitor-outbound-connections
      rule: fd.type = ipv4 and fd.is_server = false
      action: log
      message: "Outbound network connection initiated"

---
# Resource Quotas for Security
apiVersion: v1
kind: ResourceQuota
metadata:
  name: security-resource-quota
  namespace: oceansurge
spec:
  hard:
    # Limit total resources to prevent resource exhaustion attacks
    requests.cpu: "10"
    requests.memory: 20Gi
    requests.storage: 100Gi
    limits.cpu: "20"
    limits.memory: 40Gi
    
    # Limit number of objects to prevent object proliferation attacks
    pods: "50"
    services: "20"
    secrets: "20"
    configmaps: "50"
    persistentvolumeclaims: "10"
    
    # Security-related limits
    count/deployments.apps: "20"
    count/replicasets.apps: "50"
    count/networkpolicies.networking.k8s.io: "20"

---
# Limit Ranges for Security
apiVersion: v1
kind: LimitRange
metadata:
  name: security-limit-range
  namespace: oceansurge
spec:
  limits:
  # Container limits
  - type: "Container"
    default:
      cpu: "500m"
      memory: "512Mi"
      ephemeral-storage: "1Gi"
    defaultRequest:
      cpu: "100m"
      memory: "128Mi"
      ephemeral-storage: "100Mi"
    max:
      cpu: "2"
      memory: "4Gi"
      ephemeral-storage: "10Gi"
    min:
      cpu: "50m"
      memory: "64Mi"
      ephemeral-storage: "50Mi"
  
  # Pod limits
  - type: "Pod"
    max:
      cpu: "4"
      memory: "8Gi"
      ephemeral-storage: "20Gi"
  
  # PVC limits
  - type: "PersistentVolumeClaim"
    max:
      storage: "50Gi"
    min:
      storage: "1Gi"

---
# Security Monitoring ServiceMonitor (Prometheus)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: security-metrics
  namespace: oceansurge
  labels:
    app: security-monitoring
spec:
  selector:
    matchLabels:
      security-monitoring: enabled
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true
  namespaceSelector:
    matchNames:
    - oceansurge

---
# Security Alerting Rules
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: security-alerts
  namespace: oceansurge
  labels:
    app: security-monitoring
spec:
  groups:
  - name: security.rules
    rules:
    
    # Authentication failures
    - alert: HighAuthenticationFailures
      expr: rate(product_catalog_auth_attempts_total{status="failed"}[5m]) > 0.1
      for: 2m
      labels:
        severity: warning
        category: security
      annotations:
        summary: "High authentication failure rate detected"
        description: "Authentication failure rate is {{ $value }} failures/sec"
    
    # Unusual API access patterns
    - alert: UnusualAPIAccess
      expr: rate(product_catalog_requests_total[5m]) > 100
      for: 5m
      labels:
        severity: warning
        category: security
      annotations:
        summary: "Unusual API access pattern detected"
        description: "API request rate is {{ $value }} requests/sec"
    
    # Security events
    - alert: SecurityEventDetected
      expr: rate(product_catalog_security_events_total[5m]) > 0
      for: 1m
      labels:
        severity: critical
        category: security
      annotations:
        summary: "Security event detected"
        description: "Security event of type {{ $labels.event_type }} detected"
    
    # Database connection failures
    - alert: DatabaseConnectionFailures
      expr: rate(product_catalog_security_events_total{event_type="database_connection_failed"}[5m]) > 0
      for: 1m
      labels:
        severity: critical
        category: security
      annotations:
        summary: "Database connection failures detected"
        description: "Database connection failures occurring at {{ $value }} failures/sec"
    
    # Pod security violations
    - alert: PodSecurityViolation
      expr: increase(k8s_pod_security_violations_total[5m]) > 0
      for: 0s
      labels:
        severity: critical
        category: security
      annotations:
        summary: "Pod security policy violation"
        description: "Pod {{ $labels.pod }} violated security policy: {{ $labels.violation }}"
    
    # Excessive resource usage (potential DoS)
    - alert: ExcessiveResourceUsage
      expr: |
        (
          sum(rate(container_cpu_usage_seconds_total{namespace="oceansurge"}[5m])) /
          sum(kube_pod_container_resource_limits{namespace="oceansurge", resource="cpu"})
        ) > 0.8
      for: 10m
      labels:
        severity: warning
        category: security
      annotations:
        summary: "Excessive CPU usage detected"
        description: "CPU usage is {{ $value | humanizePercentage }} of limits"

---
# Admission Controller Configuration (if using OPA Gatekeeper)
apiVersion: v1
kind: ConfigMap
metadata:
  name: admission-controller-policy
  namespace: oceansurge
data:
  # Security policies for admission control
  security-policy.rego: |
    package kubernetes.admission
    
    # Deny privileged containers
    deny[msg] {
      input.request.kind.kind == "Pod"
      input.request.object.spec.containers[_].securityContext.privileged == true
      msg := "Privileged containers are not allowed"
    }
    
    # Require security context
    deny[msg] {
      input.request.kind.kind == "Pod"
      input.request.object.spec.containers[_]
      not input.request.object.spec.containers[_].securityContext.runAsNonRoot
      msg := "Containers must specify runAsNonRoot: true"
    }
    
    # Require resource limits
    deny[msg] {
      input.request.kind.kind == "Pod"
      container := input.request.object.spec.containers[_]
      not container.resources.limits.memory
      msg := "Containers must specify memory limits"
    }
    
    # Deny dangerous capabilities
    deny[msg] {
      input.request.kind.kind == "Pod"
      container := input.request.object.spec.containers[_]
      container.securityContext.capabilities.add[_] == "SYS_ADMIN"
      msg := "SYS_ADMIN capability is not allowed"
    }