---
# Shopping Cart Code ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: shopping-cart-code
  namespace: oceansurge
data:
  main.py: |
    #!/usr/bin/env python3
    """
    Simplified Shopping Cart API Service
    """
    import asyncio
    import os
    import json
    import uuid
    from typing import List, Optional, Dict
    from contextlib import asynccontextmanager
    from datetime import datetime, timedelta

    try:
        import redis.asyncio as redis
        from fastapi import FastAPI, HTTPException, Header
        from pydantic import BaseModel, Field
        import httpx
        import uvicorn
    except ImportError as e:
        print(f"Missing dependencies: {e}")
        print("Installing required packages...")
        import subprocess
        import sys
        subprocess.run([sys.executable, "-m", "pip", "install", 
                       "fastapi", "uvicorn[standard]", "redis", "pydantic", "httpx"])
        import redis.asyncio as redis
        from fastapi import FastAPI, HTTPException, Header
        from pydantic import BaseModel, Field
        import httpx
        import uvicorn

    # Redis client
    redis_client = None

    # Pydantic models
    class CartItem(BaseModel):
        product_id: int
        name: str
        price: float
        quantity: int = Field(..., gt=0)
        sku: str
        
    class CartItemAdd(BaseModel):
        product_id: int
        quantity: int = Field(..., gt=0)

    class Cart(BaseModel):
        cart_id: str
        user_id: Optional[str] = None
        items: List[CartItem] = []
        total_items: int = 0
        total_amount: float = 0.0
        created_at: datetime
        updated_at: datetime
        expires_at: datetime

    @asynccontextmanager
    async def lifespan(app: FastAPI):
        """Manage application lifecycle"""
        print("Starting Shopping Cart API")
        await init_redis()
        yield
        print("Shutting down Shopping Cart API")
        if redis_client:
            await redis_client.close()

    app = FastAPI(
        title="Shopping Cart API",
        description="Shopping cart microservice with Redis persistence",
        version="1.0.0",
        lifespan=lifespan
    )

    async def init_redis():
        """Initialize Redis connection"""
        global redis_client
        try:
            redis_client = redis.from_url(
                f"redis://{os.getenv('REDIS_HOST', 'redis')}:{os.getenv('REDIS_PORT', 6379)}/1"
            )
            await redis_client.ping()
            print("Redis connection established")
        except Exception as e:
            print(f"Failed to connect to Redis: {e}")
            raise

    async def get_product_info(product_id: int) -> Dict:
        """Fetch product information from Product Catalog API"""
        try:
            product_api_url = os.getenv('PRODUCT_CATALOG_URL', 'http://product-catalog-api')
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{product_api_url}/products/{product_id}")
                if response.status_code == 200:
                    return response.json()
                elif response.status_code == 404:
                    raise HTTPException(status_code=404, detail="Product not found")
                else:
                    raise HTTPException(status_code=503, detail="Product service unavailable")
        except httpx.RequestError:
            raise HTTPException(status_code=503, detail="Product service unavailable")

    def generate_cart_id() -> str:
        """Generate a unique cart ID"""
        return str(uuid.uuid4())

    async def get_cart_key(cart_id: str) -> str:
        """Generate Redis key for cart"""
        return f"cart:{cart_id}"

    async def serialize_cart(cart: Cart) -> str:
        """Serialize cart to JSON string"""
        cart_dict = cart.dict()
        # Convert datetime objects to ISO strings
        cart_dict['created_at'] = cart.created_at.isoformat()
        cart_dict['updated_at'] = cart.updated_at.isoformat()
        cart_dict['expires_at'] = cart.expires_at.isoformat()
        return json.dumps(cart_dict)

    async def deserialize_cart(cart_json: str) -> Cart:
        """Deserialize cart from JSON string"""
        cart_dict = json.loads(cart_json)
        # Convert ISO strings back to datetime objects
        cart_dict['created_at'] = datetime.fromisoformat(cart_dict['created_at'])
        cart_dict['updated_at'] = datetime.fromisoformat(cart_dict['updated_at'])
        cart_dict['expires_at'] = datetime.fromisoformat(cart_dict['expires_at'])
        return Cart(**cart_dict)

    # Health check endpoint
    @app.get("/health")
    async def health_check():
        """Health check endpoint"""
        try:
            await redis_client.ping()
            return {"status": "healthy", "service": "shopping-cart"}
        except Exception as e:
            print(f"Health check failed: {e}")
            raise HTTPException(status_code=503, detail="Service unhealthy")

    # Cart endpoints
    @app.post("/carts", response_model=Cart, status_code=201)
    async def create_cart(user_id: Optional[str] = Header(None, alias="X-User-ID")):
        """Create a new shopping cart"""
        cart_id = generate_cart_id()
        now = datetime.utcnow()
        expires_at = now + timedelta(hours=24)  # Cart expires in 24 hours
        
        cart = Cart(
            cart_id=cart_id,
            user_id=user_id,
            items=[],
            total_items=0,
            total_amount=0.0,
            created_at=now,
            updated_at=now,
            expires_at=expires_at
        )
        
        cart_key = await get_cart_key(cart_id)
        await redis_client.setex(cart_key, 86400, await serialize_cart(cart))  # 24 hours TTL
        
        print(f"Created cart {cart_id}")
        return cart

    @app.get("/carts/{cart_id}", response_model=Cart)
    async def get_cart(cart_id: str):
        """Get a shopping cart"""
        cart_key = await get_cart_key(cart_id)
        cart_json = await redis_client.get(cart_key)
        
        if not cart_json:
            raise HTTPException(status_code=404, detail="Cart not found")
        
        cart = await deserialize_cart(cart_json)
        
        # Check if cart has expired
        if datetime.utcnow() > cart.expires_at:
            await redis_client.delete(cart_key)
            raise HTTPException(status_code=404, detail="Cart expired")
        
        return cart

    @app.post("/carts/{cart_id}/items", response_model=Cart)
    async def add_item_to_cart(cart_id: str, item: CartItemAdd):
        """Add item to shopping cart"""
        # Get cart
        cart_key = await get_cart_key(cart_id)
        cart_json = await redis_client.get(cart_key)
        
        if not cart_json:
            raise HTTPException(status_code=404, detail="Cart not found")
        
        cart = await deserialize_cart(cart_json)
        
        # Check if cart has expired
        if datetime.utcnow() > cart.expires_at:
            await redis_client.delete(cart_key)
            raise HTTPException(status_code=404, detail="Cart expired")
        
        # Get product information
        product_info = await get_product_info(item.product_id)
        
        # Check if item already exists in cart
        existing_item = None
        for cart_item in cart.items:
            if cart_item.product_id == item.product_id:
                existing_item = cart_item
                break
        
        if existing_item:
            # Update quantity
            existing_item.quantity += item.quantity
        else:
            # Add new item
            cart_item = CartItem(
                product_id=item.product_id,
                name=product_info['name'],
                price=product_info['price'],
                quantity=item.quantity,
                sku=product_info['sku']
            )
            cart.items.append(cart_item)
        
        # Recalculate totals
        cart.total_items = sum(item.quantity for item in cart.items)
        cart.total_amount = sum(item.price * item.quantity for item in cart.items)
        cart.updated_at = datetime.utcnow()
        
        # Save cart
        await redis_client.setex(cart_key, 86400, await serialize_cart(cart))
        
        print(f"Added item {item.product_id} to cart {cart_id}")
        return cart

    @app.delete("/carts/{cart_id}/items/{product_id}", response_model=Cart)
    async def remove_item_from_cart(cart_id: str, product_id: int):
        """Remove item from cart"""
        # Get cart
        cart_key = await get_cart_key(cart_id)
        cart_json = await redis_client.get(cart_key)
        
        if not cart_json:
            raise HTTPException(status_code=404, detail="Cart not found")
        
        cart = await deserialize_cart(cart_json)
        
        # Remove item
        cart.items = [item for item in cart.items if item.product_id != product_id]
        
        # Recalculate totals
        cart.total_items = sum(item.quantity for item in cart.items)
        cart.total_amount = sum(item.price * item.quantity for item in cart.items)
        cart.updated_at = datetime.utcnow()
        
        # Save cart
        await redis_client.setex(cart_key, 86400, await serialize_cart(cart))
        
        print(f"Removed item {product_id} from cart {cart_id}")
        return cart

    @app.delete("/carts/{cart_id}")
    async def clear_cart(cart_id: str):
        """Clear/delete a cart"""
        cart_key = await get_cart_key(cart_id)
        result = await redis_client.delete(cart_key)
        
        if result == 0:
            raise HTTPException(status_code=404, detail="Cart not found")
        
        print(f"Cleared cart {cart_id}")
        return {"message": "Cart cleared successfully"}

    # Statistics endpoint for monitoring
    @app.get("/stats")
    async def get_stats():
        """Get cart statistics"""
        try:
            # Get all cart keys
            cart_keys = await redis_client.keys("cart:*")
            total_carts = len(cart_keys)
            
            return {
                "total_carts": total_carts,
                "active_carts": total_carts,  # Simplified
                "service": "shopping-cart"
            }
        except Exception as e:
            print(f"Failed to get stats: {e}")
            return {"error": "Failed to retrieve statistics"}

    if __name__ == "__main__":
        uvicorn.run(app, host="0.0.0.0", port=8080)

  requirements.txt: |
    fastapi==0.104.1
    uvicorn[standard]==0.24.0
    redis==5.0.1
    pydantic==2.5.0
    httpx==0.25.2

---
# Shopping Cart API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shopping-cart-api
  namespace: oceansurge
  labels:
    app: shopping-cart-api
    tier: backend
    component: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: shopping-cart-api
  template:
    metadata:
      labels:
        app: shopping-cart-api
        tier: backend
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
      - name: install-deps
        image: python:3.11-slim
        command: ['sh', '-c']
        args:
        - |
          pip install --target /deps -r /code/requirements.txt
        volumeMounts:
        - name: shopping-cart-code
          mountPath: /code
        - name: deps
          mountPath: /deps
      containers:
      - name: shopping-cart-api
        image: python:3.11-slim
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_PORT
          value: "6379" 
        - name: PRODUCT_CATALOG_URL
          value: "http://product-catalog-api"
        - name: PYTHONPATH
          value: "/deps"
        command: ['python', '/app/main.py']
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: shopping-cart-code
          mountPath: /app
        - name: deps
          mountPath: /deps
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 12
      volumes:
      - name: shopping-cart-code
        configMap:
          name: shopping-cart-code
      - name: deps
        emptyDir: {}