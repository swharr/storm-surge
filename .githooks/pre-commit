#!/usr/bin/env bash
#
# Pre-commit hook to automatically fix trailing whitespace
# This hook will fix trailing whitespace in staged files before committing

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}🔍 Pre-commit: Checking for trailing whitespace...${NC}"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo "No staged files to check"
    exit 0
fi

# Function to check if file should be processed
should_process() {
    local file="$1"
    
    # Skip binary files
    if file --mime "$file" 2>/dev/null | grep -q "binary"; then
        return 1
    fi
    
    # Skip specific directories/files
    case "$file" in
        */node_modules/*|*/.git/*|*/.npm/*|*/coverage/*|*/test-logs/*|*/__pycache__/*|*.min.js|*.min.css)
            return 1
            ;;
        *.py|*.yaml|*.yml|*.json|*.sh|*.js|*.ts|*.tsx|*.jsx|*.html|*.css|*.md|*.txt)
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

FILES_WITH_WHITESPACE=()
FILES_FIXED=()

# Check each staged file
for FILE in $STAGED_FILES; do
    if [ -f "$FILE" ] && should_process "$FILE"; then
        # Check for trailing whitespace
        if grep -q '[[:space:]]$' "$FILE" 2>/dev/null; then
            FILES_WITH_WHITESPACE+=("$FILE")
            
            # Fix trailing whitespace
            echo -e "${YELLOW}  Fixing whitespace in: $FILE${NC}"
            
            # Remove trailing whitespace based on OS
            if [[ "$OSTYPE" == "darwin"* ]]; then
                # macOS
                sed -i '' 's/[[:space:]]*$//' "$FILE"
            else
                # Linux
                sed -i 's/[[:space:]]*$//' "$FILE"
            fi
            
            # Re-stage the file with fixes
            git add "$FILE"
            FILES_FIXED+=("$FILE")
        fi
    fi
done

# Report results
if [ ${#FILES_FIXED[@]} -gt 0 ]; then
    echo
    echo -e "${GREEN}Fixed trailing whitespace in ${#FILES_FIXED[@]} file(s):${NC}"
    for FILE in "${FILES_FIXED[@]}"; do
        echo -e "   - $FILE"
    done
    echo
    echo -e "${GREEN}Files have been fixed and re-staged. Proceeding with commit...${NC}"
fi

# Check for end-of-file newlines
echo -e "${GREEN}🔍 Pre-commit: Checking for missing end-of-file newlines...${NC}"

for FILE in $STAGED_FILES; do
    if [ -f "$FILE" ] && should_process "$FILE"; then
        # Check if file ends with newline
        if [ -n "$(tail -c 1 "$FILE")" ]; then
            echo -e "${YELLOW}  Adding newline to: $FILE${NC}"
            echo >> "$FILE"
            git add "$FILE"
        fi
    fi
done

echo -e "${GREEN}✨ Pre-commit checks complete!${NC}"
exit 0
